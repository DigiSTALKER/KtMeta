/*
 * Copyright 2020 Hochikong
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.github.hochikong.ktmeta.testOnly;

import com.formdev.flatlaf.FlatIntelliJLaf;
import io.vertx.core.Vertx;
import io.vertx.core.eventbus.EventBus;
import org.apache.commons.lang3.StringUtils;

import javax.swing.text.BadLocationException;
import java.awt.*;

/**
 * @author ckhoi
 */
public class TextEditorDemo extends javax.swing.JFrame {

    /**
     * Creates new form TextEditorDemo
     */
    public TextEditorDemo() {
        this.eb.consumer("TextEditorTips", message -> {
            change(message.body().toString());
        });
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jTextArea1.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextArea1CaretUpdate(evt);
            }
        });
        jScrollPane2.setViewportView(jTextArea1);

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 642, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 511, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextArea1CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextArea1CaretUpdate
        int currentCaretPost = jTextArea1.getCaretPosition();
        if (currentCaretPost < lastCaretPost) {
            return;
        }

        if (this.tips != null) {
            this.tips.setVisible(false);
        }
        try {
            String content = this.jTextArea1.getText();
            String diff;
            int caretPosition;
            if (jTextArea1.getCaretPosition() > 0 && jTextArea1.getCaretPosition() < content.length()) {
                caretPosition = jTextArea1.getCaretPosition();
                diff = content.substring(caretPosition - 1, content.length() - 1);
                System.out.println("+++++++++");
                System.out.println(diff);
                System.out.println("---------");
                if (diff.startsWith("c") || diff.startsWith("C")) {
                    this.tips = new TextEditorTips(this.cTips, this.eb);
                    this.currentTips = this.cTips;
                    showTips = true;
                }

                if (diff.startsWith("p") || diff.startsWith("P")) {
                    this.tips = new TextEditorTips(this.pTips, this.eb);
                    this.currentTips = this.pTips;
                    showTips = true;
                }

                if (diff.startsWith("b") || diff.startsWith("B")) {
                    this.tips = new TextEditorTips(this.bTips, this.eb);
                    this.currentTips = this.bTips;
                    showTips = true;
                }

                if (diff.startsWith("(")) {
                    this.tips = new TextEditorTips(this.sTips, this.eb);
                    this.currentTips = this.sTips;
                    showTips = true;
                }

                if (diff.startsWith("v") || diff.startsWith("V")) {
                    this.tips = new TextEditorTips(this.vTips, this.eb);
                    this.currentTips = this.vTips;
                    showTips = true;
                }

                if (diff.startsWith("n") || diff.startsWith("N")) {
                    this.tips = new TextEditorTips(this.nTips, this.eb);
                    this.currentTips = this.nTips;
                    showTips = true;
                }

            } else {
                diff = StringUtils.difference(originString, content);
                System.out.println("+++++++++");
                System.out.println(diff);
                System.out.println("---------");
                if (diff.endsWith("c") || diff.endsWith("C")) {
                    this.tips = new TextEditorTips(this.cTips, this.eb);
                    this.currentTips = this.cTips;
                    showTips = true;
                }

                if (diff.endsWith("p") || diff.endsWith("P")) {
                    this.tips = new TextEditorTips(this.pTips, this.eb);
                    this.currentTips = this.pTips;
                    showTips = true;
                }

                if (diff.endsWith("b") || diff.endsWith("B")) {
                    this.tips = new TextEditorTips(this.bTips, this.eb);
                    this.currentTips = this.bTips;
                    showTips = true;
                }

                if (diff.endsWith("(")) {
                    this.tips = new TextEditorTips(this.sTips, this.eb);
                    this.currentTips = this.sTips;
                    showTips = true;
                }

                if (diff.endsWith("v") || diff.endsWith("V")) {
                    this.tips = new TextEditorTips(this.vTips, this.eb);
                    this.currentTips = this.vTips;
                    showTips = true;
                }

                if (diff.endsWith("not") || diff.endsWith("NOT")) {
                    this.tips = new TextEditorTips(this.nTips, this.eb);
                    this.currentTips = this.nTips;
                    showTips = true;
                }

            }

            if (showTips) {
                Rectangle rectangle = this.jTextArea1.modelToView(this.jTextArea1.getCaretPosition());
                rectangle.y = rectangle.y + 15;
                this.tips.setBounds(rectangle);
                this.tips.setSize(new Dimension(200, 100));
                this.jTextArea1.add(this.tips);
                this.tips.jList1.requestFocus();
            } else {
                if (this.tips != null) {
                    this.tips.setVisible(false);
                }
            }

        } catch (BadLocationException e) {
            // TODO
        }
    }//GEN-LAST:event_jTextArea1CaretUpdate

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        FlatIntelliJLaf.install();

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                TextEditorDemo x = new TextEditorDemo();
                x.setVisible(true);
                x.setLocationRelativeTo(null);
            }
        });
    }

    private TextEditorTips tips;

    private final String[] cTips = new String[]{"CREATE TABLE", "CREATE INDEX", "CREATE VIEW"};
    private final String[] pTips = new String[]{"PRIMARY KEY"};
    private final String[] bTips = new String[]{"BIGSERIAL"};
    private final String[] sTips = new String[]{"( );"};
    private final String[] vTips = new String[]{"VARCHAR", "VARCHAR("};
    private final String[] nTips = new String[]{"NOT NULL"};
    private String[] currentTips;
    private String originString;
    private boolean showTips = false;
    private final Vertx vertx = Vertx.vertx();
    private final EventBus eb = vertx.eventBus();

    private void change(String msg) {
        int caretPostAfterEdit = 0;
        this.tips.setVisible(false);
        System.out.println(msg);
        String origin = this.jTextArea1.getText();
        int caretPost = jTextArea1.getCaretPosition();
        System.out.println(caretPost);

        StringBuilder builder = new StringBuilder();
        String head = origin.substring(0, caretPost - 1);
        String tail = origin.substring(caretPost);
        if (head.isEmpty()) {
            jTextArea1.setText(msg);
            caretPostAfterEdit = msg.length();
        } else if (!head.isEmpty() && tail.isEmpty()) {
            builder.append(head);
            builder.append(msg);
            caretPostAfterEdit = builder.length();
            jTextArea1.setText(builder.toString());
        } else if (!head.isEmpty() && !tail.isEmpty()) {
            builder.append(head);
            builder.append(msg);
            caretPostAfterEdit = builder.length();
            builder.append(tail);
            jTextArea1.setText(builder.toString());
        }

        this.tips.jList1.clearSelection();
        this.originString = this.jTextArea1.getText();
        this.showTips = false;
        this.jTextArea1.requestFocus();
        jTextArea1.setCaretPosition(caretPostAfterEdit);
        lastCaretPost = caretPostAfterEdit;
    }

    private int lastCaretPost = 0;


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
}
